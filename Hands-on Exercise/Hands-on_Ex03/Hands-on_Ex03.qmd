---
title: "Hands-on Ex 03: Interactivity in Visual Analytics: Principles and Methods"
author: "Liang Xiuhao Rydia"
date: "April 27, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

## 1.0 Overview

In this hands on exercise 3, we will be learning Chapter 3 and 4 of R for Visual Analytics. For Part I, we will focus on creating interactive data visualisation by using functions provided by *ggiraph* and *plotly* packages. For Part II, we will focus on learning how to create animated data visualisation by using gganimate and plotly r packages. At the same time, we will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.

# 2.0 Part I - Programming Interactive Data Visualisation with R

## 2.1 Getting Started

First, write a code chunk to check, install and launch the following R packages:

-   DT: provides an R interface to the JavaScript library DataTables that create interactive table on html page.

-   ggiraph: for making ‘ggplot’ graphics interactive.

-   patchwork: for combining multiple ggplot2 graphs into one figure.

-   plotly: R library for plotting interactive statistical graphs.

-   tidyverse: a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.

The code chunk below will be used to accomplish the task.

```{r}
pacman::p_load(DT, ggiraph, 
               patchwork, plotly, 
               tidyverse) 
```

## 2.2 Importing Data

In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.

The code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## 2.3 Interactive Data Visualisation - ggiraph methods

### 2.3.1 Tooltip effect with tooltip aesthetic

Below shows a typical code chunk to plot an interactive statistical graph by using *ggiraph* package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, `girafe()` of *ggiraph* will be used to create an interactive svg object.

```{r}
p <- ggplot(exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

Notice that two steps are involved. First, an interactive version of ggplot2 geom [i.e. `geom_dotplot_interactive()`](https://davidgohel.github.io/ggiraph/reference/geom_dotplot_interactive.html) will be used to create the basic graph. Then, [`girafe()`](https://davidgohel.github.io/ggiraph/reference/girafe.html) will be used to generate an svg object to be displayed on an html page.

## 2.4 Interactivity

By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.










