---
title: "Hands-on Ex 2: Beyond ggplot2 Fundamentals"
author: "Liang Xiuhao Rydia"
date: "April 20, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

## 1 Overview

This chapter / Hands-on exercise is an introduction to several ggplot2 extension. Key idea is to create more elegant and effective statistical graphics, pleasing to the eyes of the reader, and reducing the cognitive load of the reader.

Key learning:

-   control the placement of annotation on a graph by using functions provided in ggrepel package

-   create professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages

-   plot composite figure by combining ggplot2 graphs by using patchwork package.

## 2 Getting started

::: panel-tabset
## Installing and loading the required libraries

In this exercise, beside tidyverse, four R packages will be used. They are:

-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.
-   ggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.
-   hrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.
-   patchwork: an R package for preparing composite figure created using ggplot2.

Code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.

```{r}
pacman::p_load(ggrepel,patchwork,
               ggthemes,hrbrthemes,
               tidyverse)
```

## Importing data

For the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.

The code chunk below imports exam_data.csv into R environment by using [read_csv()](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package. **readr** is one of the tidyverse package.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## glimpse() the Data

```{r}
glimpse(exam_data)
```

There are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.

-   Categorical attributes: ID, CLASS, GENDER and RACE.

-   Continuous attributes: MATHS, ENGLISH and SCIENCE.
:::

## 3 Beyond ggplot2 Annotation: ggrepel

Annotation for large number of data points is potentially challenging, as the annotations may overwhelm the plot. In this example, `geom_label()` is used to show the labels on all the data points. The resulting plot below shows the annotation covering much of the data points.

::: panel-tabset
## The plot

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              linewidth=0.5) +  
  geom_label(aes(label = ID), 
             hjust = 0.5, 
             vjust = 0.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## The code

```{r}
#| eval: false
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              linewidth=0.5) +  
  geom_label(aes(label = ID), 
             hjust = 0.5, 
             vjust = 0.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

[ggrepel](https://ggrepel.slowkow.com/) is an extension of **ggplot2** package which provides `geoms` for **ggplot2** to repel overlapping text as in our example above.

We simply replace `geom_text()` by [`geom_text_repel()`](https://ggrepel.slowkow.com/reference/geom_text_repel.html) and `geom_label()` by [`geom_label_repel`](https://ggrepel.slowkow.com/reference/geom_text_repel.html).

::: panel-tabset
## The plot

```{r}
#| echo: False
ggplot(exam_data,
       aes(x= MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  geom_label_repel(aes(label = ID),
                   hjust = 0.5,
                   vjust = 0.5) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")

```

## The code

```{r}
#| eval: False
ggplot(exam_data,
       aes(x= MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  geom_label_repel(aes(label = ID),
                   hjust = 0.5,
                   vjust = 0.5) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")

```
:::

## 4 Beyond ggplot2 Themes

There are eight [built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) in ggplot2. You can browse through the plots of all the themes below. Visit this [link](https://ggplot2.tidyverse.org/reference/index.html#themes) to learn more about ggplot2 `Themes`.

::: panel-tabset
## 1. theme_gray() - Default

-   <div>

    ```{r}
    #| echo: FALSE
    ggplot(exam_data,
           aes(x = MATHS,
           y = ENGLISH)) +
      geom_point() +
      geom_smooth(method = lm,
                  linewidth = 0.5) +
      ggtitle("English scores versus Maths scores for Primary 3") +
      geom_label_repel(aes(label = ID), 
                       max.overlaps = 5) +
      theme_gray()
    ```

    </div>

## 2. theme_bw()

```{r}
#| echo: FALSE
ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English scores versus Maths scores for Primary 3")+
  theme_bw()
```

## 3. theme_classic()

```{r}
#| echo: FALSE
ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English scores versus Maths scores for Primary 3") +
  geom_label_repel(aes(label = ID), 
                   max.overlaps = 5) +
  theme_classic()
```

## 4. theme_dark()

```{r}
#| echo: FALSE
ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English scores versus Maths scores for Primary 3") +
  geom_label_repel(aes(label = ID), 
                   max.overlaps = 5) +  
  theme_dark()
```

## 5. theme_light()

```{r}
#| echo: FALSE
ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English scores versus Maths scores for Primary 3") +
  geom_label_repel(aes(label = ID), 
                   max.overlaps = 5) +  
  theme_light()
```

## 6. theme_linedraw()

```{r}
#| echo: FALSE
ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English scores versus Maths scores for Primary 3") +
  geom_label_repel(aes(label = ID), 
                   max.overlaps = 5) +  
  theme_linedraw()
```

## 7. theme_minimal()

```{r}
#| echo: FALSE
ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English scores versus Maths scores for Primary 3") +
  geom_label_repel(aes(label = ID), 
                   max.overlaps = 5) +  
  theme_minimal()
```

## 8. theme_void()

```{r}
#| echo: FALSE
ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English scores versus Maths scores for Primary 3") +
  geom_label_repel(aes(label = ID), 
                   max.overlaps = 5) +  
  theme_void()
```
:::

### Points to note

-   Note 1
-   Note 2

## 4.1 Working with ggthemes package

[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/index.html) provides ['ggplot2' themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots by Edward Tufte, Stephen Few, [Fivethirtyeight](https://fivethirtyeight.com/), [The Economist](https://www.economist.com/graphic-detail), 'Stata', 'Excel', and [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/), among others.

In the example below, *wsj* theme is used.

::: panel-tabset
## The plot

```{r}
#| echo: FALSE
ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English versus Maths scores") +
  geom_label_repel(aes(label = ID), 
                   max.overlaps = 5) +  
  theme_wsj()
```

## The code

```{r}
#| eval: FALSE
ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English versus Maths scores") +
  geom_label_repel(aes(label = ID), 
                   max.overlaps = 5) +  
  theme_wsj()
```
:::

::: callout-tip
### Additional tip on ggthemes

-   Visit this [link](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) for the overview of the applications of each theme.
:::

## 4.2 Working with hrbrthemes package

The [hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/) is a collection of custom themes and utility functions for creating visually appealing and consistent plots using ggplot2. This package is developed by [Bob Rudis (hrbrmstr)](https://github.com/hrbrmstr/hrbrthemes) and offers an assortment of themes and utilities that can enhance the aesthetics and readability of your ggplot2 visualisations.

::: panel-tabset
## Original

```{r}
#| echo: FALSE
ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English versus Maths scores") +
  geom_label_repel(aes(label = ID), 
                   max.overlaps = 5)
```

## With FT Theme

```{r}
#| echo: FALSE
ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English versus Maths scores") +
  geom_label_repel(aes(label = ID), 
                   max.overlaps = 5) +  
  theme_ft_rc(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```
:::




### What can we learn from the code chunk above?

-   `axis_title_size` argument is used to increase the font size of the axis title to 18,
-   `base_size` argument is used to increase the default axis label to 15, and
-   `grid` argument is used to remove the x-axis grid lines.


## 5 Beyond Single Graph

It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.

::: panel-tabset
## The plot

```{r}
#| echo: FALSE
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

## The code

```{r}
#| eval: FALSE
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

:::

Next, we create two more graphs.

::: panel-tabset
## The plot

```{r}
#| echo: FALSE
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

## The code

```{r}
#| eval: FALSE
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```
:::

::: panel-tabset
## The plot

```{r}
#| echo: FALSE
p3 <- ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English scores versus Maths scores for Primary 3") +
  geom_label_repel(aes(label = ID), 
                   max.overlaps = 5) +  
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

## The code

```{r}
#| echo: FALSE
p3 <-ggplot(exam_data,
       aes(x = MATHS,
       y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              linewidth = 0.5) +
  ggtitle("English scores versus Maths scores for Primary 3") +
  geom_label_repel(aes(label = ID), 
                   max.overlaps = 5) +  
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")

```
:::

## 5.1 Creating Composite Graphics: patchwork methods

There are several ggplot2 extension's functions support the needs to prepare composite figure by combining several graphs such as [`grid.arrange()`](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html) of **gridExtra** package and [`plot_grid()`](https://wilkelab.org/cowplot/reference/plot_grid.html) of [**cowplot**](https://wilkelab.org/cowplot/index.html) package. In this section, I am going to shared with you an ggplot2 extension called [**patchwork**](https://patchwork.data-imaginist.com/index.html) which is specially designed for combining separate ggplot2 graphs into a single figure.

Patchwork package has a very simple syntax where we can create layouts super easily.

General syntax that combines: - Two-Column Layout using the Plus Sign `+`. - Parenthesis `()` to create a subplot group. - Two-Row Layout using the Division Sign `/`

### 5.2 Combining the ggplot2 graphs

::: panel-tabset
## The plot using `+`

```{r}
#| echo: FALSE
p1 + p2
```

## The code using `+`

```{r}
#| eval: FALSE
p1 + p2
```

## The plot using all 3 syntax

```{r}
#| echo: FALSE
(p1 + p2) / p3
```

## The code using all 3 syntax

```{r}
#| eval: FALSE
(p1 + p2) / p3
```
:::

Refer to [Plot Assembly](https://patchwork.data-imaginist.com/articles/guides/assembly.html) to learn more about nesting and wrapping of plots.

### 5.3 Creating a composite figure with tag 
In order to identify subplots in text, *patchwork* also provides auto-tagging capabilities as shown in the figure below.

::: panel-tabset
## The plot
```{r}
#| echo: FALSE
(p1 + p2) / p3 + 
  plot_annotation(tag_levels = 'I')

```
## The code
```{r}
#| eval: FALSE
(p1 + p2) / p3 + 
  plot_annotation(tag_levels = 'I')

```
:::

## 5.4 Creating figure with insert

Beside providing functions to place plots next to each other based on the provided layout. With [`inset_element()`](https://patchwork.data-imaginist.com/reference/inset_element.html) of **patchwork**, we can place one or several plots or graphic elements freely on top or below another plot.

::: panel-tabset
## The plot
```{r}
#| echo: FALSE
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)

```
## The code
```{r}
#| eval: FALSE
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)

```
:::

## Creating a composite figure by using patchwork and ggtheme

Figure below is created by combining patchwork and theme_ft_rc() of ggthemes package discussed earlier.

::: panel-tabset
## The plot
```{r}
#| echo: FALSE
patchwork <- (p1 / p2) | p3
patchwork & theme_ft_rc()

```
## The code
```{r}
#| eval: FALSE
patchwork <- (p1 + p2) / p3
patchwork & theme_ft_rc()
```
:::


















