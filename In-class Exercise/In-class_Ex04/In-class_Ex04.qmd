---
title: "In-class Ex04: Visualising Statistical Analysis"
author: "Liang Xiuhao Rydia"
date: "4 May 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## 

```{r}
pacman::p_load(ggstatsplot, tidyverse)
```

```{r}
exam <- read_csv("data/Exam_data.csv")
```
The parametric test (student's t):
```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "parametric",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)
```

The non-parametric(Wilcoxon) test will have median line plotted instead of mean. 
```{r}
set.seed(1234)

p_n <- gghistostats(
  data = exam,
  x = ENGLISH,
  type = "non-parametric",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)
```

How to save the tibble after plotting:
- save the plot as an object "p_n"

```{r}
extract_stats(p_n)
```


The parametric test (student's t):
```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "parametric",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)
```

The robust(bootstrapped method) test will have trimmed mean line plotted instead of mean. 
```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "robust",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)
```
The parametric test (student's t):
```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "parametric",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)
```

The bayes test will have not have the Bayes statistics below. mean of MAP used instead. 
```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)
```
Adjusting normal.curve TRUE / FALSE
Adjusting normal.curve.args as list
```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = TRUE,
  normal.curve.args = list(linewidth = 0.5),
  xlab = "English scores"
)
```
Notes on reading documentation:
-   Logical value: TRUE or FALSE
-   normal.curve.arg: can use a list of ggplot's aesthetic arguments


Dot plot:
-   does sorting from highest to lowest and present in percentile.
```{r}
ggdotplotstats(
  data = exam,
  x = ENGLISH,
  y = CLASS,
  title = "",
  xlab = ""
)
```

Looking at the exam tibble:
1.    We need to have a subject column and a scores column instead of the current form with Subjects as the header with all the scores as data.\
2.  Do a pivot table to combine ENGLISH, MATHS, SCIENCE into a subject column. 

```{r}
exam_long <- exam %>%
  pivot_longer(
    cols = ENGLISH:SCIENCE,
    names_to = "SUBJECT",
    values_to = "SCORES") %>%
  filter(CLASS == "3A")
```

Note:Data can be filtered using tidyverse commands
```{r}
ggwithinstats(
  data = filter(exam_long,
                SUBJECT %in%
                  c("MATHS", "SCIENCE")),
  x = SUBJECT,
  y = SCORES,
  type = "p"
)
```













