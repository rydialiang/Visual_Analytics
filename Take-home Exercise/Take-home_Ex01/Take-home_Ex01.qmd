---
title: "Take-home Ex 01"
author: "Liang Xiuhao Rydia"
date: "April 15, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **Building Elegant and yet Informative Data Visualisation**

## 1.0 Overview

### 1.1 Setting the scene

There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly \$14,000 for families/couples buying a new HDB flat. Singapore is a city-state with limited land resource. Housing, on the other hand, is one of the basic need of people of this city-state. In order to ensure that all citizen in the country can access to affordable housing, the government have initiated massive public housing programme since independent.

### 1.2 The Task

Assuming the role of a graphical editor of a media company, you are requested to prepare minimum two and maximum three data visualisation to reveal the ***private residential market*** and ***sub-markets of Singapore*** for the 1st quarter of 2024.

## 2.0 Set Up

### 2.1 Loading the packages into R

T he `pac::p_load()` function to load the required R packages in the working environment. The following packages are used in this set up:

-   ggthemes: Extra themes, geoms, and scales for ggplot2.
-   tidyverse: A collection of core packages designed for data science, used extensively for data preparation and wrangling.
-   ggridges: a ggplot2 extension specially designed for plotting ridgeline plots
-   colorspace:
-   ggiraph: for making ‘ggplot’ graphics interactive.
-   plotly: R library for plotting interactive statistical graphs.
-   patchwork: specially designed for combining separate ggplot2 graphs into a single figure.
-   To add more...

```{r}
# load tidyverse from pacman
pacman::p_load(tidyverse,dplyr,ggridges,ggthemes,colorspace,ggiraph,plotly,patchwork)
```

### 2.2 Importing the data sets

Five sets of data are provided for this exercise:

1.  2023 Quarter 1 Residential Transaction: ResidentialTransaction20240308160536.csv
2.  2023 Quarter 2 Residential Transaction: ResidentialTransaction20240308160736.csv
3.  2023 Quarter 3 Residential Transaction: ResidentialTransaction20240308161009.csv
4.  2023 Quarter 4 Residential Transaction: ResidentialTransaction20240308161109.csv
5.  2024 Quarter 1 Residential Transaction: ResidentialTransaction20240414220633.csv

All five sets of data consists of past transactions between Q1 of 2023 to Q1 of 2024, with 21 variables that will be explored in detail after the data sets are imported.

```{r}
# load transaction data using readr, part of tidyverse package
data.23Q1 <- read_csv("data/ResidentialTransaction20240308160536.csv")
data.23Q2 <- read_csv("data/ResidentialTransaction20240308160736.csv")
data.23Q3 <- read_csv("data/ResidentialTransaction20240308161009.csv")
data.23Q4 <- read_csv("data/ResidentialTransaction20240308161109.csv")
data.24Q1 <- read_csv("data/ResidentialTransaction20240414220633.csv")
```

To add new column `Quarter` into each of the csv file.

```{r}
data.23Q1$Quarter <- rep('23Q1',nrow(data.23Q1))
data.23Q2$Quarter <- rep('23Q2',nrow(data.23Q2))
data.23Q3$Quarter <- rep('23Q3',nrow(data.23Q3))
data.23Q4$Quarter <- rep('23Q4',nrow(data.23Q4))
data.24Q1$Quarter <- rep('24Q1',nrow(data.24Q1))
```

Combining all the data set into one

```{r}
df <- rbind(data.23Q1,data.23Q2,data.23Q3,data.23Q4,data.24Q1)
```

To have a basic understanding of all 22 variables, `glimpse()` is used with 2024 Q1 data. We can see that there are 21 columns, with the following data types:

-   doubles: `Transacted Price ($)`, `Area (SQFT)`, `Unit Price ($ PSF)`, `Area (SQM)`, `Unit Price ($ PSM)`, `Number of Units`

-   characters: the rest of the 16 variables, including `Quarter`

Interestingly,  `Nett Price` is classified as characters, as it contains `-` character, although the rest of the columns should return doubles like `Transacted Price ($)`

```{r}
# have a basic understanding for all 22 variables
glimpse(df)
```

### 2.3 Understanding the data

On top of the data types that is automatically assigned by R to help the program know how to process it, we can split the data into 4 types of data category to help ourselves for future analytics application. 

*Qualitative*

1\. Nominal: `Project Name`, `Address`, `Type of Sale`, 

2\. Ordinal: `Type of Area`, `Property Type`, `Sales Date`, `Purchaser Address Indicator`, `Postal Code`, `Postal District`, `Postal Sector`, `Planning Region`, `Planning Area` and `Quarter`.

Some of the variables I have classified under ordinal are contextual. For example, I can choose to fill in the order for `Purchaser Address Indicator` as `Private` category is higher order than `HDB` category. The context is purchaser that address is `Private` is likely to be a person with higher Social Economic Status (SES) compared to a purchaser with `HDB` as address. Same could be applied to `Postal Code`, `Postal District`, `Postal Sector`, `Planning Region` and `Planning Area`.

*Quantitative*

3\. Discrete: `Number of Units` and `Tenure`. Note that `Tenure` is still a chr data type as of now. If we choose to use this column for analysis, we do need to do data preparation on this. `Tenure` could also be classified under continuous data for more granularity. 

4\. Continuous: `Transacted Price ($)`,`Area (SQFT)`, `Unit Price ($ PSF)`, `Area (SQM)`, `Unit Price ($ PSM)`, and `Nett Price($)`. Note that `Nett Price($)` is still a chr data type as of now. If we choose to use this column for analysis, we do need to do data preparation on this.

Special Case:
`Completion Date` is classified as chr, but a quick look at the data `df`, we will realise that this variable is a mix of quantitative and qualitative data type of `Uncomplete` and actual date of completion, which could be converted and analyse as doubles. 

Next we look at the basic statistics of the current data using summary()
```{r}
# data summary
summary(df)
```
From the continuous data above, we can conclude that there is a possibility of extreme outliers. The `Number of Units` has a max of 60, while the 3rd Quartile is 1.000. Let's examine the data by sorting it in descending order using `arrange(desc())` and take a look at data with `Number of Units`, as it greatly affect the analysis of `Transaction Price ($)`. 

```{r}
df %>%
  filter(`Number of Units` > 1) %>%
  arrange(desc(`Number of Units`)) 
```
We have 12 rows that have transactions containing more than 1 unit sold, and a check on the `Address` shows that there are 5 sales that are en-bloc cases which should be remove from the analysis. These en-bloc cases are likely sales to companies rather than individual purchasers. Otherwise, those 7 cases of transactions with more than one unit sold should be included as are likely the cases of purchase of multiple units or the purchase of Land. 

To lend some background context, you can refer to this link: [Landed vs. Strata Landed](https://plbinsights.com/landed-vs-strata-landed-whats-the-difference-how-have-they-performed-in-recent-years/#:~:text=According%20to%20the%20URA%20website,as%20a%20pure%20landed%20property.) Basically, `Strata` means you only owns the property build on this land, but do not own the land itself. `Land` means you own the land and have more freedom and responsibility in terms of the constructions etc. The application of this knowledge for analysis is that `Strata` and `Land` classification can be identify as the sub-markets as owning a piece of land is likely to be more expensive for the purchaser compared to `Strata` title.  


```{r}
ggplot(data = df ,
       aes(x = `Transacted Price ($)`,
           y = Quarter,
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE,
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()+
  facet_wrap(~`Property Type`,scales = "free") +
  theme_economist()
```

Looking at the bar chart above, it might be a good way to filter the data based on Type of Area to do further analysis. From this link, we can also derive further segregation by Property Type.

```{r}
land_df <- filter(df, `Type of Area` == 'Land')
strata_df<- filter(df, `Type of Area` == 'Strata')
```

```{r}
ggplot(data = land_df, 
       aes(x= `Property Type`,
           fill = `Purchaser Address Indicator`)) +
  geom_bar() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  facet_grid(~Quarter)
```

```{r}
ggplot(data = land_df ,
       aes(x = `Transacted Price ($)`,
           y = Quarter,
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE,
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()+
  facet_grid(~`Property Type`,scales = "free") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
  scale_x_continuous(labels = scales::comma)
  
```

```{r}
ggplot(data = land_df, 
       aes(y = `Transacted Price ($)`,
           x = `Property Type`)) +
  geom_boxplot()+
  facet_grid(~Quarter) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  coord_cartesian(xlim=c(1,4),
                  ylim=c(0,30000000))
```

```{r}
ggplot(data = strata_df, 
       aes(y = `Transacted Price ($)`,            x = `Property Type`)) +
  geom_boxplot()+
  facet_grid(~Quarter) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  coord_cartesian(xlim=c(1,6),
                  ylim=c(0,10000000))+
  theme_wsj()

```

```{r}
mean_strata_by_property_type <- strata_df %>%
  group_by(`Property Type`) %>%
  summarise(mean_price = mean(`Transacted Price ($)`))

ggplot(strata_df,
       aes(x=`Area (SQM)`, 
           y = `Transacted Price ($)`,
           color = `Property Type`)) +
  geom_point_interactive() +
  coord_cartesian(xlim=c(0,1000),
                  ylim=c(0,50000000)) +
  geom_smooth(method = lm, se = FALSE) +
  facet_wrap(~`Property Type`, scales = "free")
  
```

```{r}
mean_land_by_property_type <- land_df %>%
  group_by(`Property Type`) %>%
  summarise(mean_price = mean(`Transacted Price ($)`))

ggplot(land_df,
       aes(x=`Area (SQM)`, 
           y = `Transacted Price ($)`,
           color = `Property Type`)) +
  geom_point_interactive() +
  coord_cartesian(xlim=c(0,1000),
                  ylim=c(0,50000000)) +
  geom_smooth(method = lm, se = FALSE) +
  facet_wrap(~`Property Type`, scales = "free")
  
```

```{r}
ggplot(data = strata_df ,
       aes(x = `Transacted Price ($)`,
           y = Quarter,
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE,
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()+
  facet_grid(~`Planning Region`, scales = "free")+
  scale_x_continuous(labels = scales::comma)+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) 

```

## 3.0 Data Visualisation


```{r}
quarter_means <- df %>%
  group_by(Quarter) %>%
  summarise(mean_tprice = mean(`Transacted Price ($)`))

ggplot(data = df2,
       aes(y=`Transacted Price ($)`,
           x=`Quarter`)
       )+
  geom_violin()+
  geom_point(data = quarter_means, 
             aes(y = mean_tprice), 
             color = "red", 
             size = 3)+
  scale_y_continuous(labels = scales::comma)+
  ggtitle("Distribution of Transacted Prices by Quarter with mean")
```

```{r}
quarter_means <- land_df %>%
  group_by(Quarter) %>%
  summarise(mean_tprice = mean(`Transacted Price ($)`))

ggplot(data = df2,
       aes(y=`Transacted Price ($)`,
           x=`Quarter`)
       )+
  geom_violin()+
  geom_point(data = quarter_means, 
             aes(y = mean_tprice), 
             color = "red", 
             size = 3)+
  scale_y_continuous(labels = scales::comma)+
  ggtitle("Distribution of Transacted Prices by Quarter with mean for Land")

```

```{r}
quarter_means <- strata_df %>%
  group_by(Quarter) %>%
  summarise(mean_tprice = mean(`Transacted Price ($)`))

ggplot(data = df,
       aes(y=`Transacted Price ($)`,
           x=`Quarter`)
       )+
  geom_violin()+
  coord_cartesian(xlim=c(1,5),
                  ylim=c(min(df$`Transacted Price ($)`),7500000)) +
  geom_point(data = quarter_means, 
             aes(y = mean_tprice), 
             color = "red", 
             size = 3)+
  scale_y_continuous(labels = scales::comma)+
  ggtitle("Distribution of Transacted Prices by Quarter with mean for Strata")

```

```{r}
ggplot(data = df, 
       aes(x=`Property Type`,
           fill = `Type of Sale`)) +
  geom_bar() +
  facet_grid(~Quarter, scales = "free") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

```

```{r}
no.unit <-df %>%
  select(`Transacted Price ($)`,`Number of Units`) %>%
  filter(`Number of Units` > 1) %>%
  arrange(desc(`Number of Units`))
```

```{r}
ggplot(data = df ,
       aes(x = `Transacted Price ($)`,
           y = `Planning Region`,
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE,
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()+
  scale_x_continuous(labels = scales::comma)+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

```

```{r}
ggplot(df,
       aes(y = df$`Transacted Price ($)`)) +
  geom_boxplot()
```
