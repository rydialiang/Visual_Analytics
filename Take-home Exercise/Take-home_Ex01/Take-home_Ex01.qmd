---
title: "Take-home Ex 01"
author: "Liang Xiuhao Rydia"
date: "April 15, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **Building Elegant and yet Informative Data Visualisation**

## 1.0 Overview

### 1.1 Setting the scene

There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly \$14,000 for families/couples buying a new HDB flat. Singapore is a city-state with limited land resource. Housing, on the other hand, is one of the basic need of people of this city-state. In order to ensure that all citizen in the country can access to affordable housing, the government have initiated massive public housing programme since independent.

### 1.2 The Task

Assuming the role of a graphical editor of a media company, you are requested to prepare minimum two and maximum three data visualisation to reveal the ***private residential market*** and ***sub-markets of Singapore*** for the 1st quarter of 2024.

## 2.0 Set Up

### 2.1 Loading the packages into R

T he `pac::p_load()` function to load the required R packages in the working environment. The following packages are used in this set up:

-   ggthemes: Extra themes, geoms, and scales for ggplot2.
-   tidyverse: A collection of core packages designed for data science, used extensively for data preparation and wrangling.
-   ggridges: a ggplot2 extension specially designed for plotting ridgeline plots
-   colorspace:
-   ggiraph: for making ‘ggplot’ graphics interactive.
-   plotly: R library for plotting interactive statistical graphs.

```{r}
# load tidyverse from pacman
pacman::p_load(tidyverse,dplyr,ggridges,ggthemes,colorspace,ggiraph,plotly)
```

### 2.2 Importing the data sets

Five sets of data are provided for this exercise:

1.  2023 Quarter 1 Residential Transaction: ResidentialTransaction20240308160536.csv
2.  2023 Quarter 2 Residential Transaction: ResidentialTransaction20240308160736.csv
3.  2023 Quarter 3 Residential Transaction: ResidentialTransaction20240308161009.csv
4.  2023 Quarter 4 Residential Transaction: ResidentialTransaction20240308161109.csv
5.  2024 Quarter 1 Residential Transaction: ResidentialTransaction20240414220633.csv

All five sets of data consists of past transactions between Q1 of 2023 to Q1 of 2024, with 21 variables that will be explored in detail after the data sets are imported.

```{r}
# load transaction data using readr, part of tidyverse package
data.23Q1 <- read_csv("data/ResidentialTransaction20240308160536.csv")
data.23Q2 <- read_csv("data/ResidentialTransaction20240308160736.csv")
data.23Q3 <- read_csv("data/ResidentialTransaction20240308161009.csv")
data.23Q4 <- read_csv("data/ResidentialTransaction20240308161109.csv")
data.24Q1 <- read_csv("data/ResidentialTransaction20240414220633.csv")
```

To add new column `Quarter` into each of the csv file.

```{r}
data.23Q1$Quarter <- rep('23Q1',nrow(data.23Q1))
data.23Q2$Quarter <- rep('23Q2',nrow(data.23Q2))
data.23Q3$Quarter <- rep('23Q3',nrow(data.23Q3))
data.23Q4$Quarter <-rep('23Q4',nrow(data.23Q4))
data.24Q1$Quarter <- rep('24Q1',nrow(data.24Q1))
```

Combining all the data set into one

```{r}
df <- rbind(data.23Q1,data.23Q2,data.23Q3,data.23Q4,data.24Q1)
```

To have a basic understanding of all 21 variables, `glimpse()` is used with 2024 Q1 data. We can see that there are 21 columns, with the following data types:

-   doubles:

    1.  `Transacted Price ($)`
    2.  `Area (SQFT)`
    3.  `Unit Price ($ PSF)`
    4.  `Area (SQM)`
    5.  `Unit Price ($ PSM)`
    6.  `Number of Units`

-   characters: the rest of the 16 variables, including `Quarter`

```{r}
# have a basic understanding for all 22 variables
glimpse(df)


```

### 2.3 Understanding the data

```{r}
ggplot(data = df, 
       aes(x=Quarter, fill = `Type of Sale`)) +
  geom_bar() 
```

```{r}
ggplot(data = df, 
       aes(y = `Transacted Price ($)`, x = Quarter)) +
  geom_boxplot()
```

From the boxplot above, it seems like there are outliers in 23Q1 that are extremely far from the rest of the data points. We may choose to exclude these transactions to have a better data set. However, given that this are all the actual transactions that have happened in the past five quarters, it may not be a good idea to exclude these data.

Hence, we could explore other options such as comparing the selecting similar property types to make more meaningful conclusion.

```{r}
ggplot(data = df ,
       aes(x = `Transacted Price ($)`,
           y = Quarter,
           fill = 0.5)) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Transacted Price",
                       option = "C") +
  scale_x_continuous(
    name = "Transacted Price",
    expand = c(0,0)
  ) +
  scale_y_discrete(
    name = NULL,
    expand = expansion(add = c(0.2,2.6))
  ) +
  theme_ridges()


```

```{r}
ggplot(data = df, 
       aes(x=`Type of Area`,
           fill = `Type of Sale`)) +
  geom_bar() 

```

Looking at the bar chart above, it might be a good way to filter the data based on Type of Area to do further analysis. 

```{r}
land_df <- filter(df, `Type of Area` == 'Land')
strata_df<- filter(df, `Type of Area` == 'Strata')

```

```{r}
ggplot(data = land_df, 
       aes(y = `Transacted Price ($)`, x = Quarter)) +
  geom_boxplot()
```
```{r}
ggplot(data = land_df ,
       aes(x = `Transacted Price ($)`,
           y = Quarter,
           fill = 0.5)) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Transacted Price",
                       option = "C") +
  scale_x_continuous(
    name = "Transacted Price",
    expand = c(0,0)
  ) +
  scale_y_discrete(
    name = NULL,
    expand = expansion(add = c(0.2,2.6))
  ) +
  theme_ridges()


```
Although the 
```{r}
ggplot(data = strata_df, 
       aes(y = `Transacted Price ($)`, x = Quarter)) +
  geom_boxplot()
```
Looking 

```{r}
ggplot(data = df,
       aes(x =`Planning Area`,
           fill = `Type of Sale`)) +
  geom_bar() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))


```

## 3.0 Data Visualisation
