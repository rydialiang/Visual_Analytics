---
title: "Take-home Ex 01"
author: "Liang Xiuhao Rydia"
date: "April 15, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **Building Elegant and yet Informative Data Visualisation**

For the final product, you can use the table of content to the right to navigate straight to 3.0 Data Visualisation. If not, you can proceed to enjoy reading the step by step thought process for this visualisation.

## 1.0 Overview

### 1.1 Setting the scene

There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly \$14,000 for families/couples buying a new HDB flat. Singapore is a city-state with limited land resource. Housing, on the other hand, is one of the basic need of people of this city-state. In order to ensure that all citizen in the country can access to affordable housing, the government have initiated massive public housing programme since independent.

### 1.2 The Task

Assuming the role of a graphical editor of a media company, you are requested to prepare minimum two and maximum three data visualisation to reveal the ***private residential market*** and ***sub-markets of Singapore*** for the 1st quarter of 2024.

## 2.0 Set Up

### 2.1 Loading the packages into R

T he `pac::p_load()` function to load the required R packages in the working environment. The following packages are used in this set up:

-   ggthemes: Extra themes, geoms, and scales for ggplot2.
-   tidyverse: A collection of core packages designed for data science, used extensively for data preparation and wrangling.
-   ggridges: a ggplot2 extension specially designed for plotting ridgeline plots
-   colorspace:
-   ggiraph: for making ‘ggplot’ graphics interactive.
-   plotly: R library for plotting interactive statistical graphs.
-   patchwork: specially designed for combining separate ggplot2 graphs into a single figure.
-   lubridate: for easy and fast parsing of Date / Time
-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.
-   ggdist: a ggplot2 extension specially design for visualising distribution and uncertainty

```{r}
# load tidyverse from pacman
pacman::p_load(tidyverse,dplyr,ggridges,ggthemes,colorspace,ggiraph,plotly,patchwork, lubridate, ggrepel,ggdist)
```

### 2.2 Importing the data sets

Five sets of data are provided for this exercise:

1.  2023 Quarter 1 Residential Transaction: ResidentialTransaction20240308160536.csv
2.  2023 Quarter 2 Residential Transaction: ResidentialTransaction20240308160736.csv
3.  2023 Quarter 3 Residential Transaction: ResidentialTransaction20240308161009.csv
4.  2023 Quarter 4 Residential Transaction: ResidentialTransaction20240308161109.csv
5.  2024 Quarter 1 Residential Transaction: ResidentialTransaction20240414220633.csv

All five sets of data consists of past transactions between Q1 of 2023 to Q1 of 2024, with 21 variables that will be explored in detail after the data sets are imported.

```{r}
# load transaction data using readr, part of tidyverse package
data.23Q1 <- read_csv("data/ResidentialTransaction20240308160536.csv")
data.23Q2 <- read_csv("data/ResidentialTransaction20240308160736.csv")
data.23Q3 <- read_csv("data/ResidentialTransaction20240308161009.csv")
data.23Q4 <- read_csv("data/ResidentialTransaction20240308161109.csv")
data.24Q1 <- read_csv("data/ResidentialTransaction20240414220633.csv")
```

To add new column `Quarter` into each of the csv file.

```{r}
data.23Q1$Quarter <- rep('23Q1',nrow(data.23Q1))
data.23Q2$Quarter <- rep('23Q2',nrow(data.23Q2))
data.23Q3$Quarter <- rep('23Q3',nrow(data.23Q3))
data.23Q4$Quarter <- rep('23Q4',nrow(data.23Q4))
data.24Q1$Quarter <- rep('24Q1',nrow(data.24Q1))
```

Combining all the data set into one

```{r}
df <- rbind(data.23Q1,data.23Q2,data.23Q3,data.23Q4,data.24Q1)
```

To have a basic understanding of all 22 variables, `glimpse()` is used with 2024 Q1 data. We can see that there are 21 columns, with the following data types:

-   doubles: `Transacted Price ($)`, `Area (SQFT)`, `Unit Price ($ PSF)`, `Area (SQM)`, `Unit Price ($ PSM)`, `Number of Units`

-   characters: the rest of the 16 variables, including `Quarter`

Interestingly, `Nett Price` is classified as characters, as it contains `-` character, although the rest of the columns should return doubles like `Transacted Price ($)`

```{r}
# have a basic understanding for all 22 variables
glimpse(df)
```

### 2.3 Understanding the data

On top of the data types that is automatically assigned by R to help the program know how to process it, we can split the data into 4 types of data category to help ourselves for future analytics application. You can refer to the FAQ, Data Dictionary and Methodology in [URA website](https://www.ura.gov.sg/reis/dataDictionary).

*Qualitative*

1\. Nominal: `Project Name`, `Address`, `Type of Sale`,

2\. Ordinal: `Type of Area`, `Property Type`, `Sales Date`, `Purchaser Address Indicator`, `Postal Code`, `Postal District`, `Postal Sector`, `Planning Region`, `Planning Area` and `Quarter`.

Some of the variables I have classified under ordinal are contextual. For example, I can choose to fill in the order for `Purchaser Address Indicator` as `Private` category is higher order than `HDB` category. The context is purchaser that address is `Private` is likely to be a person with higher Social Economic Status (SES) compared to a purchaser with `HDB` as address. Same could be applied to `Postal Code`, `Postal District`, `Postal Sector`, `Planning Region` and `Planning Area`.

*Quantitative*

3\. Discrete: `Number of Units` and `Tenure`. Note that `Tenure` is still a chr data type as of now. If we choose to use this column for analysis, we do need to do data preparation on this. `Tenure` could also be classified under continuous data for more granularity.

4\. Continuous: `Transacted Price ($)`,`Area (SQFT)`, `Unit Price ($ PSF)`, `Area (SQM)`, `Unit Price ($ PSM)`, and `Nett Price($)`. Note that `Nett Price($)` is still a chr data type as of now. If we choose to use this column for analysis, we do need to do data preparation on this.

Special Case: `Completion Date` is classified as chr, but a quick look at the data `df`, we will realise that this variable is a mix of quantitative and qualitative data type of `Uncomplete` and actual date of completion, which could be converted and analyse as doubles.

Some important observations: 1. `Transacted Price ($)` and `Nett Price($)` are similar. In this analysis, we will use `Transacted Price ($)` for simplicity, as `Nett Price($)` has fair amount of missing data, and it is prices after deducting the value of the indirect discounts or benefits, and not representive for all transactions. 1. `Area (SQFT)` and `Area (SQM)`, and `Unit Price ($ PSF)` and `Unit Price ($ PSM)` are similar measures in different unit. We will use `Area (SQFT)` and `Unit Price ($ PSF)`

Next we look at the basic statistics of the current data using summary()

::: panel-tabset
### The Output

```{r}
#| echo: False
# data summary
summary(df)
```

### The Code

```{r}
#| eval: False
# data summary
summary(df)
```
:::

From the continuous data above, we can conclude that there is a possibility of extreme outliers. The `Number of Units` has a max of 60, while the 3rd Quartile is 1.000. Let's examine the data by sorting it in descending order using `arrange(desc())` and take a look at data with `Number of Units`, as it greatly affect the analysis of `Transaction Price ($)`.

```{r}
df %>%
  filter(`Number of Units` > 1) %>%
  arrange(desc(`Number of Units`)) 
```

We have 12 rows that have transactions containing more than 1 unit sold, and a check on the `Address` shows that there are 5 sales that are en bloc cases which should be remove from the analysis. These en bloc cases are likely sales to companies for purpose of redevelopment rather than individual purchasers. See this [link](https://www.businesstimes.com.sg/companies-markets/meyer-park-sold-uol-singapore-land-group-jv-s39218-million-third-en-bloc-attempt) on the Meyer Park en bloc transaction. Otherwise, those 7 cases of transactions with more than one unit sold should be included as are likely the cases of purchase of multiple units or the purchase of multiple adjacent plots of land.

Let's take a quick look at distribution before any data wrangling:

```{r}
df %>%
  ggplot(aes(y = `Transacted Price ($)`,            
           x = `Property Type`)) +
  geom_boxplot()+
  facet_grid(~Quarter) +
  coord_cartesian(xlim=c(1,6)) +
  scale_y_continuous(labels = scales::comma) +
  theme_wsj() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

```

```{r}
ggplot(data = df ,
       aes(x = `Transacted Price ($)`,
           y = Quarter,
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE,
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_economist(name = "Quartiles") +
  theme_ridges() +
  facet_wrap(~`Property Type`,scales = "free") +
  theme_economist() +
  scale_x_continuous(labels = NULL)
```

### 2.3.1 Identifying Sub-markets

**Land vs. Strata**

To lend some background context, you can refer to this link: [Landed vs. Strata Landed](https://plbinsights.com/landed-vs-strata-landed-whats-the-difference-how-have-they-performed-in-recent-years/#:~:text=According%20to%20the%20URA%20website,as%20a%20pure%20landed%20property.) Basically, `Strata` means you only owns the property build on this land, but do not own the land itself. `Land` means you own the land and have more freedom and responsibility in terms of the constructions etc. The application of this knowledge for analysis is that `Strata` and `Land` classification can be identify as the sub-markets as owning a piece of land is likely to be more expensive for the purchaser compared to `Strata` title.

```{r}
df %>%
  filter(`Type of Area` == 'Land') %>%
  ggplot(aes(x= `Quarter`,
           fill = `Purchaser Address Indicator`)) +
  geom_bar() +
  facet_grid(~`Property Type`) +
  theme_economist() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  ggtitle("Land: No. of Transactions by Property Type")
```

```{r}
df %>%
  filter(`Type of Area` == 'Strata') %>%
  ggplot(aes(x= `Quarter`,
           fill = `Purchaser Address Indicator`)) +
  geom_bar() +
  facet_wrap(~`Property Type`) +
  theme_economist() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  ggtitle("Strata: No. of Transactions by 'Property Type'")
```

To understand which `Type of Area` has high market value by `Transacted Price ($)`:

```{r}
df %>%
  select(`Transacted Price ($)`,`Type of Area`) %>%
  group_by(`Type of Area`) %>%
  summarise(`Total Transaction Price ($)` = sum(`Transacted Price ($)`), `Mean Transaction Price ($)` = mean(`Transacted Price ($)`), `Median Transaction Price ($)` = median(`Transacted Price ($)`))
```

Diving a bit deeper.We segregate them by `Property Type`

```{r}
df %>%
  select(`Transacted Price ($)`,`Type of Area`, `Property Type`) %>%
  group_by(`Property Type`, `Type of Area`) %>%
  summarise(`Median Transaction Price ($)` = median(`Transacted Price ($)`))
```

```{r}
df %>%
  select(`Transacted Price ($)`,`Type of Area`, `Property Type`) %>%
  group_by(`Property Type`,`Type of Area`) %>%
  summarise(`Median Transaction Price ($)` = median(`Transacted Price ($)`, .groups = 'drop')) %>%
  ggplot(aes(y = `Median Transaction Price ($)`,
             x = `Property Type`)) +
  geom_point() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_continuous(labels = scales::comma)
```

Some learning points from these plots and tibbles:

1.  Apartment, Condominium and Terrace House seems to be affected most by outliers. There are two extreme outliers for transactions in 23Q1 and they are the two en bloc sales with 60 and 47 units of condominium each. As mention, the 5 en bloc sales will be removed from the data set to enable meaningful analysis.

2.  No. of transactions for Apartment classified under `Type of Area` as Land is low.There is no transaction of Condominium and Executive Condominium as these categories of Property Type are always strata for `Type of Sale`. The URA [Methodology](https://www.ura.gov.sg/reis/coverageandMethodology) Miscellaneous tab explains some of the terminologies.

3.  No. of transactions for Detached House, Semi-Detached House and Terrace House are low compared to the rest of the three categories.

4.  Sub markets to focus on based on the number of transactions could be the following lists.

    -   For Land `Type of Sale`: Detached House, Semi-Detached House, and Terrace House.

    -   For Strata `Type of Sale`: Apartment, Condominium, and Executive Condominium.

5.  However, we should also note that we can prioritise the sub-market for analysis based on the total, mean and median `Transaction Price ($)` in each category (Land and Strata) instead of just looking at volume of transactions. In the `Type of Area` with Total of `Transacted Price ($)` tibbles above, we see that Land type transaction low in volume, the total transactions in the 5 quarters is about 1/5 the total transactions of Stata type sales. However, when we look at the mean and median `Transacted Price ($)`, we observe that mean and median `Transaction Price ($)` Land type is roughly 3 times of Strata type.

    -   This mean that Land type has low volume for number of transactions but generally higher average `Transacted Price ($)`.

    -   For Strata type, it has high volume but lower average `Transacted Price ($)`.

6.  Lastly, the scatter plot of median `Transaction Price ($)` suggest that there is a difference in the median price for the same `Property Type` with different `Type of Area`. Hence, the should study each of this sub-markets individually.

### 2.4 Data Wrangling

In this section, we aim to clean the data set to ensure the usefulness and accuracy of the visualisation.

This is achieved by:

1.  Removing irrelevant data and outliers
2.  Appropriate categorisation of variables
3.  Additions of new variables to add new dimensions to analysis

### 2.4.1 Removing the en bloc sales (irrelevant data)

For the follow code chunk, we aim to remove all the enbloc sales, including the 5 transactions that we have found in section 2.3. While we have no idea if there are more than 5 cases of en bloc sales, the follow code chunk will effectively remove all the rows with the string "ENBLOC" in `Address` column.

```{r}
df.c <- df %>%
  filter(!grepl('ENBLOC', df$Address))
df.c
```

In the df.c tibble, it showed that 5 rows had been removed. Now there is only 26,801 rows instead of the original 26,806 rows in the initial df. This confirm that there are only 5 en bloc sales in the data frame.

### 2.4.2 Appropriate categorisation of variables

Previously, we have identified the `Sale Date` as Ordinal quantitative variable largely because it is classified as chr type in R. However, when we apply the knowledge from [Fundamentals of Data Visualization Chapter 2](https://clauswilke.com/dataviz/aesthetic-mapping.html) and [R for Visual Analytics Chapter 17](https://r4va.netlify.app/chap17.html#plotting-calendar-heatmap) date or time in fact, can be treated as discrete or continuous data.


## 3.0 Data Visualisation

::: panel-tabset
## The Plot
```{r}
#| echo: False
df.c %>%
  filter(`Property Type` == 'Condominium', `Quarter` == '24Q1') %>%
  ggplot(aes(x = `Transacted Price ($)`,
           y = `Planning Region`,
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE,
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()+
  scale_x_continuous(labels = scales::comma) +
  theme_economist() +
  theme(plot.title = element_text(size=12), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + 
  ggtitle("24Q1 Distribution of Transacted Price by Planning Region")
```
## The Code
```{r}
#| eval: False
df.c %>%
  filter(`Property Type` == 'Condominium', `Quarter` == '24Q1') %>%
  ggplot(aes(x = `Transacted Price ($)`,
           y = `Planning Region`,
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE,
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()+
  scale_x_continuous(labels = scales::comma) +
  theme_economist() +
  theme(plot.title = element_text(size=12), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + 
  ggtitle("24Q1 Distribution of Transacted Price by Planning Region")
```
:::


::: panel-tabset 
## The Plot

## The Code
```{r}
#| echo: False
quarter_means <- df.c %>%
  filter(`Property Type` == 'Condominium',`Planning Region` == "Central Region") %>%
  group_by(Quarter) %>%
  summarise(mean_uprice = mean(`Unit Price ($ PSF)`))

df.c %>%
  filter(`Property Type` == 'Condominium', `Planning Region` == "Central Region") %>%
  ggplot(aes(y=`Unit Price ($ PSF)`,
           x=`Quarter`)
       )+
  geom_violin() +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  geom_point(data = quarter_means, 
             aes(y = mean_uprice), 
             color = "red", 
             size = 3)+
  scale_y_continuous(labels = scales::comma) +
  theme_economist() +
  ggtitle("Condominium Unit Price ($ PSF) for Central Region") 
```
:::

::: panel-tabset
## The Plot
```{r}
#| echo: False
df.c %>%
  filter(`Property Type` == 'Condominium', `Quarter` == '24Q1', `Planning Region` == "Central Region") %>%
  ggplot(aes(x = `Transacted Price ($)`, 
           y = `Purchaser Address Indicator`, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = c(0.05, 0.95)
    ) +
  scale_fill_manual(
    name = "Percentage of Total",
    values = c("#FF00FFA0", "#FFE4E1A0", "#0000ffA0"),
    labels = c("Bottom 5%", "5-95%", "Top 5%")
  ) +
  theme_ridges()+
  theme_economist() +
  theme(plot.title = element_text(size=12), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_x_continuous(labels = scales::comma) + 
  ggtitle("Central Region Condominium: Purchaser Address Indicator 24Q1")
```
## The Code
```{r}
#| eval: False
df.c %>%
  filter(`Property Type` == 'Condominium', `Quarter` == '24Q1', `Planning Region` == "Central Region") %>%
  ggplot(aes(x = `Transacted Price ($)`, 
           y = `Purchaser Address Indicator`, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = c(0.05, 0.95)
    ) +
  scale_fill_manual(
    name = "Percentage of Total",
    values = c("#FF00FFA0", "#FFE4E1A0", "#0000ffA0"),
    labels = c("Bottom 5%", "5-95%", "Top 5%")
  ) +
  theme_ridges()+
  theme_economist() +
  theme(plot.title = element_text(size=12), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_x_continuous(labels = scales::comma) + 
  ggtitle("Central Region Condominium: Purchaser Address Indicator 24Q1")
```
:::




## 4.0 References

1\. T.S. Kam, R for Visual Analytics [Chapter 9](https://r4va.netlify.app/chap09) for visualisation of Ridgeline plots with quantile lines.

2\. Claus O. Wilke, Fundamentals of Data Visualization [Chapter 2](https://clauswilke.com/dataviz/aesthetic-mapping.html) for understanding and classification of variables.

3\. Stack Overflow, ["Filter rows which contain a certain string"](https://stackoverflow.com/questions/22850026/filter-rows-which-contain-a-certain-string) for removing en bloc sales from the data frame.
